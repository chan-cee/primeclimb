import random
from board import *
from constants import *

class Player:
  def __init__(self, player_symbol):
    self.player_symbol = player_symbol
    self.pawns = [Pawn(player_symbol, 0), Pawn(player_symbol, 1)]
    self.all_operations = True
    self.cards = []
    self.other_player = "D"

  def set_other_player(self, other_player):
    self.other_player = other_player

  def restrict_operations(self):
    self.all_operations = False

  def enable_operations(self):
    self.all_operations = True

  def play_move(self, board : Board):
    if board.power_cards_mode:
      return self.play_move_power_card(board)
    else:
      return self.play_move_normal(board)

  def play_move_normal(self, board: Board):
    print(f"It is now player {self.player_symbol}'s turn.\n")
    self.display_current_pawns(self.pawns)
    while True:
      user_action = input("What do you want to do? r to roll dice: ")
      if user_action == "r":
        return self.play_dice(board)
      else:
        print("That is not a valid move!\n")


  def play_move_power_card(self, board: Board):
    print(f"It is now player {self.player_symbol}'s turn.\n")
    self.display_current_pawns(self.pawns)
    self.display_current_cards(self.cards)

    while True:
      user_action = input("What do you want to do? r to roll dice: ")
      if user_action == "r":
        return self.play_dice(board)
      else:
        print("That is not a valid move!\n")

  def play_dice(self, board: Board):
    dices = self.roll_and_choose_dice()

    for dice in dices:
      move_complete = False

      while not move_complete:

        while len(self.cards) > 0:      
          if not self.prompt_choose_execute_card(board):
            break

        if board.check_win(self.player_symbol):
          return [] # We leave it to state.py to manage victory conditions
        
        pawn_choice_index = self.choose_pawn_index(self.pawns, dice)
        pawn_choice = self.pawns[pawn_choice_index]
        action = self.choose_operation(self.get_valid_operations(), dice, pawn_choice)
        move = Move(dice, pawn_choice_index, action)
        is_valid_move, error = board.validate_move(move.dice_roll, pawn_choice, move.operation)

        if is_valid_move:
          move_complete = True
          result = board.apply_move(move.dice_roll, pawn_choice, move.operation)
          print(result)
          if board.check_win(self.player_symbol):
            return [] # We leave it to state.py to manage victory conditions
        else:
          print(error)

    while len(self.cards) > 0:      
      if not self.prompt_choose_execute_card(board):
        break

    if board.check_win(self.player_symbol):
      return [] # We leave it to state.py to manage victory conditions
    
    return [] # Return an empty list of moves as they have been applied already.
  
  def roll_and_choose_dice(self):
    first_dice = random.randint(1, 6)
    second_dice = random.randint(1, 6)
    dices = [first_dice, second_dice]
    dice_string = [str(first_dice), str(second_dice)]
    print(f"You got dice rolls {first_dice} and {second_dice}.\n")

    if first_dice == second_dice:
      print(f"You get to roll the dice 4 times!")
      return [first_dice, first_dice, first_dice, first_dice]

    dice_choice = None

    while dice_choice not in dice_string:
      dice_choice = input("Which dice to use first? ")
      if dice_choice not in dice_string:
        print("Enter a valid dice number!\n")

    dice_choice_int = int(dice_choice)
    dices.remove(dice_choice_int)
    other_choice = dices[0]

    return [dice_choice_int, other_choice]

  def choose_pawn_index(self, pawns, movement):
    pawn_one, pawn_two = pawns
    if pawn_one.square.number == END_SQUARE:
      return 1
    
    if pawn_two.square.number == END_SQUARE:
      return 0

    pawn_numbers = ["1", "2"]
    pawn_choice = None
    pawn_index_int = None

    while pawn_choice not in pawn_numbers:
      pawn_choice = input(f"Which pawn to use for movement {movement}: ")
      if pawn_choice not in pawn_numbers:
        print("Enter a valid pawn number!\n")

    pawn_index_int = int(pawn_choice) - 1
    return pawn_index_int
  
  def choose_prime_pawns(self, pawns):
    pawn_one, pawn_two = pawns
    if not is_prime_above_10(pawn_one.square.number):
      return pawn_two
    
    if not is_prime_above_10(pawn_two.square.number):
      return pawn_one

    pawn_numbers = ["1", "2"]
    pawn_choice = None
    pawn_index_int = None
    print("Both pawns on prime numbers")

    while pawn_choice not in pawn_numbers:
      pawn_choice = input(f"Which pawn to use for action card: ")
      if pawn_choice not in pawn_numbers:
        print("Enter a valid pawn number!\n")

    pawn_index_int = int(pawn_choice) - 1
    return pawns[pawn_index_int]
  
  def get_valid_operations(self):
    if self.all_operations:
      return ["a", "s", "m", "d"]
    else:
      return ["s", "d"]
  
  def choose_operation(self, operation_choices, movement, pawn):

    op_string = ", ".join(operation_choices)
    input_string = "Choose " + op_string + ": "

    operation_choice = None
    while operation_choice not in operation_choices:
      print(f"What math operation to apply on your pawn at {pawn.square.number} for movement {movement}?")
      operation_choice = input(input_string)
      if operation_choice not in operation_choices:
        print("Enter a valid math operation!")

    return operation_choice

  def add_card(self, card):
    self.cards.append(card)

  def prompt_choose_execute_card(self, board): # Returns True is a card is executed
    if len(self.cards) == 0:
      return False
    
    user_action = input("Do you want to use a keeper card? Write y to use: ")
    if user_action == "y":
      card = self.choose_card()
      print(f"Using card \"{card.description()}\"")
      card.execute(board, self, self.other_player)
      return True
    else:
      return False

  def choose_card(self):
    if len(self.cards) == 1:
      card = self.cards[0]
      self.cards.remove(card)
      return card
    
    card_choices = [str(i + 1) for i in range(len(self.cards))]

    card_choice = None
    while card_choice not in card_choices:
      card_choice = input(f"Which card number will you like to pick: ")
      if card_choice not in card_choices:
        print("Enter a valid card index!")

    card_choice_int = int(card_choice) - 1
    card = self.cards[card_choice_int]
    self.cards.remove(card)
    return card
  
  def display_current_pawns(self, pawns):
    output_string = ""
    for i in range(NUMBER_OF_PAWNS):
      output_string += f"Pawn {i + 1} is on square {pawns[i].square.number}.\n"
    print(output_string)

  def display_current_cards(self, cards):
    output_string = "Keeper cards available:\n"
    for i in range(len(cards)):
      output_string += f"Card {i + 1}: {cards[i].description()}.\n"
    print(output_string)

class PlayerAI:
  def __init__(self, player_symbol) -> None:
    self.player_symbol = player_symbol
    self.pawns = [Pawn(player_symbol, 0), Pawn(player_symbol, 1)]
    self.other_player = "D"

  def set_other_player(self, other_player):
    self.other_player = other_player

  def enable_operations(self):
    self.all_operations = True

  def play_move(self, board: Board): # Should return a list of valid Moves that needs to be made by the AI
    first_dice = random.randint(1, 6)
    second_dice = random.randint(1, 6)
    dices = [first_dice, second_dice]
    print(f"AI got dice rolls {first_dice} and {second_dice}.\n")

    if first_dice == second_dice:
      print(f"AI gets to roll the dice 4 times!")
      dices.append(first_dice)
      dices.append(first_dice)
    
    curr_node = Node(board, self.player_symbol, False, dices)
    score, move = self.depth_limited_search(curr_node, 2, NEGATIVE_INFINITY, POSITIVE_INFINITY, self.player_symbol, False)
    return move
  
  def depth_limited_search(self, node, depth, alpha, beta, player_symbol, is_chance):
      curr_player = player_symbol if player_symbol == self.player_symbol else self.other_player
      other_player = self.other_player if player_symbol == self.player_symbol else player_symbol

      if depth == 0 or node.is_win(curr_player):
          return node.evaluate(self.player_symbol, self.other_player), None

      if is_chance:
          # AI turn and chance
          all_rolls = rolls()
          global_score = 0
          for roll in all_rolls:
              child_node = Node(node.board, player_symbol, False, roll)
              score, _ = self.depth_limited_search(child_node, depth-1, alpha, beta, other_player, False)
              global_score += all_rolls[roll] * score
              if beta <= alpha:
                  break  # beta cut-off
          return global_score, None

      else:
          if player_symbol == self.player_symbol:  # Maximizing player
              max_score = float('-inf')
              best_move = None
              children = node.generate_children(self.player_symbol, self.other_player)
              for board, moves_so_far in children:
                  child_node = Node(board, self.other_player, True, None)
                  score, _ = self.depth_limited_search(child_node, depth-1, alpha, beta, other_player, True)
                  if score > max_score:
                      max_score = score
                      best_move = moves_so_far
                  alpha = max(alpha, score)
                  if beta <= alpha:
                      break  # alpha cut-off
              return max_score, best_move

          else:  # Minimizing player
              min_score = float('inf')
              best_move = None
              children = node.generate_children(self.player_symbol, self.other_player)
              for board, moves_so_far in children:
                  child_node = Node(board, self.player_symbol, True, None)
                  score, _ = self.depth_limited_search(child_node, depth-1, alpha, beta, other_player, False)
                  if score < min_score:
                      min_score = score
                      best_move = moves_so_far
                  beta = min(beta, score)
                  if beta <= alpha:
                      break  # beta cut-off
              return min_score, best_move
  
  # def depth_limited_search(self, node, depth, player_symbol, is_chance):
  #   curr_player = player_symbol if player_symbol == self.player_symbol else self.other_player
  #   other_player = self.other_player if player_symbol == self.player_symbol else player_symbol

  #   if depth == 0 or node.is_win(curr_player):
  #     return node.evaluate(self.player_symbol, self.other_player), None
    
  #   elif is_chance:
  #     # AI turn and chance
  #     all_rolls = rolls()
  #     global_score = 0
  #     for roll in all_rolls:
  #       child_node = Node(node.board, player_symbol, False, roll)
  #       score, moves = self.depth_limited_search(child_node, depth, player_symbol, False)
  #       global_score += all_rolls[roll] * score
        
  #     return global_score, None
  #   elif player_symbol == self.player_symbol:
  #     # AI turn
  #     global_score = NEGATIVE_INFINITY
  #     global_move = None
  #     children = node.generate_children()
  #     for board, moves_so_far in children:
  #       child_node = Node(board, self.other_player, True, None)
  #       score, moves = self.depth_limited_search(child_node, depth - 1, self.other_player, True)
  #       if score > global_score:
  #         global_score = score
  #         global_move = moves_so_far

  #     return global_score, global_move
    
  #   else:
  #     # Other turn
  #     global_score = POSITIVE_INFINITY
  #     global_move = None
  #     children = node.generate_children()
  #     for board, moves_so_far in children:
  #       child_node = Node(board, self.player_symbol, True, None)
  #       score, moves = self.depth_limited_search(child_node, depth - 1, self.player_symbol, True)
  #       if score < global_score:
  #         global_score = score
  #         global_move = moves_so_far

  #     return global_score, global_move

class Pawn:
  def __init__(self, player_symbol, index):
    self.player_symbol = player_symbol
    self.previous_square = None
    self.square = None
    self.index = index
    
  def __str__(self):
    return self.player_symbol

  def set_square(self, square):
    self.square = square

  def reset_square(self):
    self.previous_square = self.square

class Node:
  def __init__(self, board, player_symbol, is_chance, rolls):
    self.board = board
    self.player_symbol = player_symbol
    self.is_chance = is_chance
    self.rolls = rolls

  def evaluate(self, player_symbol, other_player):
    pawns = self.board.get_pawns(player_symbol)
    other_pawns = self.board.get_pawns(other_player)
    score = 0
    for pawn in pawns:
      score -= HEURISTIC[pawn.square.number]
    
    for other_pawn in other_pawns:
      score += HEURISTIC[other_pawn.square.number]

    return score
  
  def is_win(self, player_symbol):
    return self.board.check_win(player_symbol)

  def compare(self, board_one, board_two):
    for i in range(102):
      square_one = board_one.get_square_from_number(i)
      square_two = board_two.get_square_from_number(i)
      if i == 0 or i == 101:
        pawns_one = square_one.get_pawn()
        pawns_two = square_two.get_pawn()
        dic = {}
        for pawn in pawns_one:
          if pawn.player_symbol not in dic:
            dic[pawn.player_symbol] = 0
          dic[pawn.player_symbol] += 1
        for pawn in pawns_two:
          if pawn.player_symbol not in dic:
            dic[pawn.player_symbol] = 0
          dic[pawn.player_symbol] -= 1

        for key in dic:
          if dic[key] != 0:
            return False
      else:
        if square_one.has_pawn() and square_two.has_pawn():
            pawns_one_symbol = square_one.get_pawn().player_symbol
            pawns_two_symbol = square_two.get_pawn().player_symbol
            if pawns_one_symbol != pawns_two_symbol:
              return False
        elif square_one.has_pawn() or square_two.has_pawn():
          return False
    return True
        
  def has_board(self, boards, board):
    for b, moves_so_far in boards:
      if self.compare(b, board):
        return True
    return False
  
  def generate_children(self, AI_symbol, other_player_symbol):
    operations = ['a', 's', 'm', 'd']
    frontier = [(self.board, 0, [])]
    children = []

    while len(frontier) != 0:
      board, roll_number, moves_so_far = frontier.pop()
      if roll_number == len(self.rolls) and not self.has_board(children, board):
        children.append((board, moves_so_far))

      elif roll_number != len(self.rolls):
        pawns = board.get_pawns(self.player_symbol)
        for pawn_index in range(len(pawns)):
          pawn = pawns[pawn_index]        
          if pawn.square.is_end_square():
            continue

          for operation in operations:
            dice_roll = self.rolls[roll_number]
            move = Move(dice_roll, pawn_index, operation)
            is_valid_move, error = board.validate_move(move.dice_roll, pawn, move.operation)
            
            if is_valid_move:
              new_board = board.get_copy()
              new_pawn = new_board.get_pawns(self.player_symbol)[pawn_index]
              new_board.apply_move(move.dice_roll, new_pawn, move.operation)
              new_moves = [old_move for old_move in moves_so_far]
              new_moves.append(move)
              frontier.append((new_board, roll_number + 1, new_moves))

    reverse = self.player_symbol == AI_symbol
    children.sort(reverse=reverse, key=eval_comparator(AI_symbol, other_player_symbol))

    return children